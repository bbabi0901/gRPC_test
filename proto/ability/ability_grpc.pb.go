// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: proto/ability/ability.proto

package ability

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AbilityClient is the client API for Ability service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AbilityClient interface {
	ListAbilities(ctx context.Context, in *ListAbilitiesRequeset, opts ...grpc.CallOption) (*ListAbilitiesResponse, error)
	GetAbilityByID(ctx context.Context, in *GetAbilityByIDRequest, opts ...grpc.CallOption) (*GetAbilityByIDResponse, error)
	GetAbilityByName(ctx context.Context, in *GetAbilityByNameRequest, opts ...grpc.CallOption) (*GetAbilityByNameResponse, error)
}

type abilityClient struct {
	cc grpc.ClientConnInterface
}

func NewAbilityClient(cc grpc.ClientConnInterface) AbilityClient {
	return &abilityClient{cc}
}

func (c *abilityClient) ListAbilities(ctx context.Context, in *ListAbilitiesRequeset, opts ...grpc.CallOption) (*ListAbilitiesResponse, error) {
	out := new(ListAbilitiesResponse)
	err := c.cc.Invoke(ctx, "/ability.Ability/ListAbilities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *abilityClient) GetAbilityByID(ctx context.Context, in *GetAbilityByIDRequest, opts ...grpc.CallOption) (*GetAbilityByIDResponse, error) {
	out := new(GetAbilityByIDResponse)
	err := c.cc.Invoke(ctx, "/ability.Ability/GetAbilityByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *abilityClient) GetAbilityByName(ctx context.Context, in *GetAbilityByNameRequest, opts ...grpc.CallOption) (*GetAbilityByNameResponse, error) {
	out := new(GetAbilityByNameResponse)
	err := c.cc.Invoke(ctx, "/ability.Ability/GetAbilityByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AbilityServer is the server API for Ability service.
// All implementations must embed UnimplementedAbilityServer
// for forward compatibility
type AbilityServer interface {
	ListAbilities(context.Context, *ListAbilitiesRequeset) (*ListAbilitiesResponse, error)
	GetAbilityByID(context.Context, *GetAbilityByIDRequest) (*GetAbilityByIDResponse, error)
	GetAbilityByName(context.Context, *GetAbilityByNameRequest) (*GetAbilityByNameResponse, error)
	mustEmbedUnimplementedAbilityServer()
}

// UnimplementedAbilityServer must be embedded to have forward compatible implementations.
type UnimplementedAbilityServer struct {
}

func (UnimplementedAbilityServer) ListAbilities(context.Context, *ListAbilitiesRequeset) (*ListAbilitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAbilities not implemented")
}
func (UnimplementedAbilityServer) GetAbilityByID(context.Context, *GetAbilityByIDRequest) (*GetAbilityByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAbilityByID not implemented")
}
func (UnimplementedAbilityServer) GetAbilityByName(context.Context, *GetAbilityByNameRequest) (*GetAbilityByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAbilityByName not implemented")
}
func (UnimplementedAbilityServer) mustEmbedUnimplementedAbilityServer() {}

// UnsafeAbilityServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AbilityServer will
// result in compilation errors.
type UnsafeAbilityServer interface {
	mustEmbedUnimplementedAbilityServer()
}

func RegisterAbilityServer(s grpc.ServiceRegistrar, srv AbilityServer) {
	s.RegisterService(&Ability_ServiceDesc, srv)
}

func _Ability_ListAbilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAbilitiesRequeset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AbilityServer).ListAbilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ability.Ability/ListAbilities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AbilityServer).ListAbilities(ctx, req.(*ListAbilitiesRequeset))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ability_GetAbilityByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAbilityByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AbilityServer).GetAbilityByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ability.Ability/GetAbilityByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AbilityServer).GetAbilityByID(ctx, req.(*GetAbilityByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ability_GetAbilityByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAbilityByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AbilityServer).GetAbilityByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ability.Ability/GetAbilityByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AbilityServer).GetAbilityByName(ctx, req.(*GetAbilityByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Ability_ServiceDesc is the grpc.ServiceDesc for Ability service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ability_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ability.Ability",
	HandlerType: (*AbilityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAbilities",
			Handler:    _Ability_ListAbilities_Handler,
		},
		{
			MethodName: "GetAbilityByID",
			Handler:    _Ability_GetAbilityByID_Handler,
		},
		{
			MethodName: "GetAbilityByName",
			Handler:    _Ability_GetAbilityByName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/ability/ability.proto",
}
